{"version":3,"file":"static/js/72.c931977f.chunk.js","mappings":"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","sources":["components/AuthForms/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import SpriteIcons from '../../../images/sprite.svg';\nimport auth from '../../../images/auth.png';\nimport logo from '../../../images/logo.png';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../../redux/auth/authOperations';\nimport { toast } from 'react-hot-toast';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n  AuthLink,\n  BtnSubmit,\n  Container,\n  ErrMsg,\n  EyeBtn,\n  HeroImg,\n  Label,\n  LabelBox,\n  Logo,\n  LogoBox,\n  StyledForm,\n  StyledInput,\n  Title,\n} from './RegisterForm.styled';\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const registerSchema = Yup.object({\n    name: Yup.string()\n      .min(3, 'Minimum 3 characters')\n      .max(30, 'Maximum 30 characters')\n      .matches(/^[a-zA-Z_]+?\\.[a-zA-Z\\s]+$/, 'Wrong name.')\n      .trim()\n      .required('This is a required field'),\n    email: Yup.string()\n      .email('Invalid email address')\n      .matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Wrong email. Try again...')\n      .trim()\n      .required('This is a required field'),\n    password: Yup.string()\n      .min(7, 'At least 7 simbols')\n      .max(20, 'At most 20 simbols')\n      .trim()\n      .required('This is a required field'),\n  });\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      await dispatch(register(values)).unwrap();\n      resetForm();\n    } catch (error) {\n      error === 'Request failed with status code 409'\n        ? toast.error('This email already exists.')\n        : toast.error('Registration failed!');\n    }\n  };\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched }) => (\n          <StyledForm>\n            <LogoBox>\n              <Logo src={logo} />\n              <span>read journey</span>\n            </LogoBox>\n            <Title>\n              Expand your mind, reading <span>a book</span>\n            </Title>\n            <LabelBox>\n              <Label htmlFor=\"name\">Name:</Label>\n              <StyledInput\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                className={`special ${\n                  errors.name && touched.name ? 'error' : ''\n                } ${touched.name && !errors.name ? 'success' : ''}`}\n              />\n              <ErrMsg name=\"name\" component=\"div\" />\n            </LabelBox>\n\n            <LabelBox>\n              <Label htmlFor=\"email\">Mail:</Label>\n              <StyledInput\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                className={`special ${\n                  errors.email && touched.email ? 'error' : ''\n                } ${touched.email && !errors.email ? 'success' : ''}`}\n              />\n              <ErrMsg name=\"email\" component=\"div\" />\n            </LabelBox>\n            <LabelBox>\n              <Label htmlFor=\"password\">Password:</Label>\n              <StyledInput\n                autoComplete=\"off\"\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                id=\"password\"\n                className={`special ${\n                  touched.password && errors.password ? 'error' : ''\n                } ${touched.password && !errors.password ? 'success' : ''}`}\n              />\n              <EyeBtn onClick={() => handleTogglePassword()} type=\"button\">\n                {touched.password && errors.password ? (\n                  <svg width=\"20\" height=\"20\">\n                    <use xlinkHref={`${SpriteIcons}#icon-error`} />\n                  </svg>\n                ) : touched.password && !errors.password ? (\n                  <svg width=\"20\" height=\"20\">\n                    <use xlinkHref={`${SpriteIcons}#icon-check`} />\n                  </svg>\n                ) : (\n                  <svg width=\"18\" height=\"18\">\n                    <use\n                      xlinkHref={\n                        showPassword\n                          ? `${SpriteIcons}#icon-eye`\n                          : `${SpriteIcons}#icon-eye-off`\n                      }\n                    />\n                  </svg>\n                )}\n              </EyeBtn>\n              <ErrMsg name=\"password\" component=\"p\" />\n            </LabelBox>\n            <BtnSubmit type=\"submit\">\n              <span>Registration</span>\n            </BtnSubmit>\n            <AuthLink to=\"/login\">Already have an account?</AuthLink>\n          </StyledForm>\n        )}\n      </Formik>\n      <HeroImg src={auth} alt=\"phone\" />\n    </Container>\n  );\n};\n","import { RegisterForm } from 'components/AuthForms/RegisterForm/RegisterForm';\n\nexport default function RegisterPage() {\n  return <RegisterForm />;\n}\n"],"names":["RegisterForm","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","registerSchema","Yup","name","min","max","matches","trim","required","email","password","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref","resetForm","_context","prev","next","register","unwrap","t0","toast","stop","_x","_x2","apply","arguments","_jsxs","Container","children","_jsx","Formik","initialValues","validationSchema","onSubmit","_ref3","errors","touched","StyledForm","LogoBox","Logo","src","logo","Title","LabelBox","Label","htmlFor","StyledInput","type","id","className","concat","ErrMsg","component","autoComplete","EyeBtn","onClick","prevState","width","height","xlinkHref","SpriteIcons","BtnSubmit","AuthLink","to","HeroImg","auth","alt","RegisterPage"],"sourceRoot":""}